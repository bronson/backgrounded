#!/usr/bin/env bash
#
# Runs a task in the background, detached from the terminal.
#       backgrounded [options] [operation] [name] command
#
#   backgrounded "sleep 10; bundle exec rake render"
#      launches a simple command, creates backgrounded.pid and backgrounded.log
#   backgrounded kill
#
#   backgrounded render "sleep 10; bundle exec rake render"
#      launched with render.pid and render.log (both files creaded in basedir)
#   backgrounded kill render
#
#   backgrounded --pidfile=log/r.pid bgtask ./my-background-task
#       you can specify a different pidfile and logfile
#   backgrounded kill --pidfile=pf.pid
#   backgrounded kill --pidfile=pf.pid bgtask
#
# start: kills an existing backgrounded process if a pidfile is found,
#        then detaches from the terminal, turns off SIGHUP, writes the
#        pidfile, runs the command, and cleans up the pidfile when it's done.
# status: prints a message and sets an exit code depending on whether
#        the backgrounded task is still running.
# kill: does everything in its power to stop the task.  Asks politely
#       at first, then gets more forceful.
#
# As crazy as this is, it's more reliable than running nohup,
# and it runs everywhere unlike setsid and friends.


# returns the name of the logfile or pidfile to use
find_file() {
  eval fn=\$${1}file
  if [ -n "$fn" ];
    then echo "$fn"
  elif [ -n "$name" ];
    then echo "$basedir/$name.$1"
  else
    echo "backgrounded-task.$1"
  fi
}


perform_status() {
  if [ -f "$1" ]; then
    if kill -0 "$(cat "$1")" 2>/dev/null; then
      echo "$1 is running: $(cat "$1")"
      return 0
    fi
    rm -f "$1"
  fi

  echo "$1 isn't running"
  return 1
}


attempt_kill() {
  if [ -f "$1" ]; then
    if ! kill -0 "$(cat "$1")" 2>/dev/null; then
      echo "$(date +%FT%T%z) deleted stale pidfile '$1' for process $(cat "$1")"
      rm -f "$1"
    else
      echo "$(date +%FT%T%z) asking process $(cat "$1") pid '$1' to $2"
      kill -"$2" -"$(cat "$1")"
      sleep $3
    fi
  fi
  [ ! -f "$1" ] && return 0
}

perform_kill() {
  attempt_kill "$1" TERM 1 ||
  attempt_kill "$1" TERM 1 ||
  attempt_kill "$1" KILL 1 ||
  attempt_kill "$1" KILL 2 ||
  attempt_kill "$1" KILL 4 ||
  exit 2
}


start_arg() {
  if [ -n "$name" ]; then echo "too many arguments" >&2; exit 1; fi
  if [ -n "$command" ]; then name="$command"; fi
  command="$1"
}

status_arg() {
  name="$1"
  perform_status "$(find_file pid)"
  status_done=yes
}

kill_arg() {
  name="$1"
  perform_kill "$(find_file pid)"
  kill_done=yes
}



start_run() {
  if [ -z "$command" ]; then
    echo "you must specify a command" >&2
    exit 1
  fi

  fpid="$(find_file pid)"
  flog="$(find_file log)"

  # exits if the kill wasn't successful
  perform_kill "$pidfile"

  # set monitor mode so the child becomes a process group leader.
  # if you don't do this, and the parent exits, the group can't be killed.
  set -m

  ( # start a subprocess so we can disown it
    [ -z "$BASHPID" ] && BASHPID="$(sh -c 'echo $PPID')"
    echo "$BASHPID" > "$fpid"
    trap "rm -f '$fpid'" INT TERM EXIT
    bash -c -l "$command"
  ) >>"$flog" 2>&1 </dev/null & disown
}

status_run() {
  [ -z "$status_done" ] && perform_status "$(find_file pid)"
}

kill_run() {
  [ -z "$kill_done" ] && perform_kill "$(find_file pid)"
}


basedir='.'
operation=start
while [ $# -gt 0 ]; do
  case "$1" in
    -d) basedir="$2"; shift 2;;
    -p) pidfile="$2"; shift 2;;
    -l) logfile="$2"; shift 2;;

    --basedir=*) basedir="${1#*=}"; shift 1;;
    --pidfile=*) pidfile="${1#*=}"; shift 1;;
    --logfile=*) logfile="${1#*=}"; shift 1;;
    --basedir|--pidfile|--logfile) echo "$1 requires an argument" >&2; exit 1;;

    start|status|kill) operation="$1"; shift 1;;
    stop) operation=kill; shift 1;;

    -*) echo "unknown option: $1" >&2; exit 1;;

    *) "$operation"_arg "$@"; arguments+=" $1"; shift 1 ;;
  esac
done

"$operation"_run
exit 0 # ensure we return success
