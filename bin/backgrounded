#!/usr/bin/env bash
#
#   backgrounded [start] [name] [--options] command
#   backgrounded [kill|status] [name] [signal]
#
#   https://github.com/bronson/backgrounded
#
# Runs a task in the background, detached from the terminal.
#       backgrounded [options] [operation] [name] command
#
#   backgrounded "sleep 10; bundle exec rake render"
#      creates backgrounded.pid and backgrounded.log, then runs the command
#   backgrounded kill
#
#   backgrounded render "sleep 10; bundle exec rake render"
#      launched with render.pid and render.log
#   backgrounded kill render
#
#   backgrounded --pidfile=log/r.pid bgtask ./my-background-task
#       you can specify a different pidfile and logfile
#   backgrounded kill --pidfile=pf.pid   # name is optional when you specify a pidfile
#   backgrounded kill --pidfile=pf.pid bgtask
#
# start: kills an existing backgrounded process if a pidfile is found,
#        then detaches from the terminal, turns off SIGHUP, writes the
#        pidfile, runs the command, and cleans up the pidfile when it's done.
# status: prints a message and sets an exit code depending on whether
#        the backgrounded task is still running.
# kill: does everything in its power to stop the task.  Asks politely
#       at first, then gets more forceful.
#
# As crazy as this is, it's more reliable than running nohup,
# and it runs everywhere unlike setsid and friends.

die() {
  echo "$@" >&2
  exit 1
}


# returns the name of the logfile or pidfile to use
find_file() {
  eval fn=\$${1}file
  if [ -n "$fn" ]; then
    echo "$fn"
  else
    echo "$name.$1"
  fi
}

attempt_kill() {
  [ -z "$name" ] && name="$argument"
  [ -z "$name" ] && name=backgrounded-task
  fpid="$(find_file pid)"

  if [ -f "$fpid" ]; then
    if ! kill -0 "$(cat "$fpid")" 2>/dev/null; then
      [ -z "$quiet" ] && echo "$(date +%FT%T%z) deleted stale pidfile '$fpid' for process $(cat "$fpid")"
      rm -f "$fpid"
    elif [ -n "$1" ]; then
      [ -z "$quiet" ] && echo "$(date +%FT%T%z) asking process $(cat "$fpid") pid '$fpid' to $1"
      kill -"$1" -"$(cat "$fpid")"
      [ -n "$2" ] && sleep "$2"
    fi
  fi
  [ ! -f "$fpid" ] && return 0
}


run_status() {
  if quiet=1 attempt_kill; then
    [ -z "$quiet" ] && echo "$fpid isn't running"
    return 1
  fi

  [ -z "$quiet" ] && echo "$fpid is running: $(cat "$fpid")"
  return 0
}


run_kill() {
  attempt_kill TERM 1 ||
  attempt_kill TERM 1 ||
  attempt_kill KILL 1 ||
  attempt_kill KILL 2 ||
  attempt_kill KILL 4 ||
  exit 2
}


run_start() {
  [ -z "$name" ] && name=backgrounded-task
  [ -z "$argument" ] && die "you must specify a command"
  quiet=1 run_kill # exits if the kill wasn't successful

  fpid="$(find_file pid)"
  flog="$(find_file log)"

  # set monitor mode so the child becomes a process group leader.
  # if you don't do this, and the parent exits, the group can't be killed.
  set -m

  ( # start a subprocess so we can disown it
    [ -z "$BASHPID" ] && BASHPID="$(sh -c 'echo $PPID')"
    echo "$BASHPID" > "$fpid"

    [ -z "$quiet" ] && echo "$(date +%FT%T%z) START backgrounded $BASHPID is starting: $argument"

    trap "rm -f '$fpid'" INT TERM EXIT
    bash -c -l "$argument" &
    wait $!

    [ -z "$quiet" ] && echo "$(date +%FT%T%z) STOP backgrounded $BASHPID is stopping: $argument"
    exit $?
  ) >>"$flog" 2>&1 </dev/null & disown
}


operation=start
case "$1" in
  start|status|kill) operation="$1"; shift 1;;
esac

while [ $# -gt 0 ]; do
  case "$1" in
    -p) pidfile="$2"; shift 2;;
    -o) logfile="$2"; shift 2;;
    -q) quiet=1; shift 1;;

    --quiet) quiet=1; shift 1;;

    # -[A-Z]*) signal="${1#-}"; shift 1;;

    --pidfile=*) pidfile="${1#*=}"; shift 1;;
    --logfile=*) logfile="${1#*=}"; shift 1;;
    --pidfile|--logfile) die "$1 requires an argument";;

    -*) die "unknown option: $1";;

    *)
      [ -n "$argument" ] && name="$argument"
      argument="$1"
      shift 1
      ;;
  esac
done

run_"$operation"
exit 0 # ensure we return success
