#!/usr/bin/env bash
#
# Runs the given commands in the background, detached from the terminal.
#
#   usage: start_background_task renderjob "sleep 10; bundle exec rake render"
#
# It kills any existing _renderjob_ processes, detaches from the
# terminal, turns off SIGHUP, writes a pidfile, runs the command,
# then cleans up the pidfile when it's done.
#
# As crazy as this is, it's more reliable than running nohup,
# and it runs everywhere, unlike setsid and friends.


pidfile="$1"
logfile="$2"
cmd="$3"

if [ -z "$pidfile" -o -z "$logfile" -o -z "$cmd" ]; then
  echo usage: start_background_task pidfile logfile command
  exit 1
fi

# set monitor mode so the child becomes a process group leader.
# if you don't do this, and the parent exits, the group can't be killed.
set -m

# disown so the child runs no matter what happens to the parent
deploy/_run_background_task "$@" >>"$logfile" 2>&1 </dev/null & disown


# NOTES:
#
# example commands to figure out -m:
# bash -c 'set -m; echo parent=$$; bash -c '\''echo $$ | tee /tmp/pid; sleep 20; echo $$ done'\'' & disown'; sleep 1; kill -- -$(cat /tmp/pid)
# bash -c -i 'bash -c '\''echo $$; sleep 10 & disown'\'' > /tmp/x'; kill -TERM -- -$(< /tmp/x)

